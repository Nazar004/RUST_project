#[macro_use]
extern crate diesel;

mod schema;
mod model;
mod controller;
mod view;

use std::process::Command;
use std::env;
use iced::Application;
use iced::Settings;

fn main() {
    // –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É (–≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª)
    let script_name = if cfg!(target_os = "windows") {
        "create_all.bat"
    } else {
        "create_all.sh"
    };

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–≥–¥–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª)
    let current_dir = env::current_dir().expect("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é");

    // –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É
    let script_dir = current_dir.join("src"); // –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ .bat –∏ .sql
    let script_path = script_dir.join(script_name);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞
    if !script_path.exists() {
        eprintln!("‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {}", script_path.display());
        return;
    }
    
    let status = if cfg!(target_os = "windows") {
        Command::new("cmd")
            .current_dir(&script_dir) // üëà —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            .args(&["/C", "call", script_path.to_str().unwrap()])
            .status()
    } else {
        Command::new("sh")
            .current_dir(&script_dir)
            .arg(script_path.to_str().unwrap())
            .status()
    };
    

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    match status {
        Ok(s) if s.success() => {
            println!("–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.");
        }
        Ok(s) => {
            eprintln!("–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: {}", s);
        }
        Err(e) => {
            eprintln!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞: {}", e);
        }
    }

    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    view::combined_app::CombinedApp::run(Settings::default()).unwrap();
}
